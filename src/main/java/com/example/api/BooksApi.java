/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.39).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.api;

import com.example.model.Book;
import com.example.model.Error;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-01-26T18:40:56.153209900+02:00[Europe/Kaliningrad]")
@Validated
@Api(value = "books", description = "the books API")
public interface BooksApi {

    @ApiOperation(value = "Add new book", nickname = "create", notes = "Create new book", response = Book.class, tags={ "books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Book.class) })
    @RequestMapping(value = "/books",
        produces = { "application/json;charset=UTF-8" }, 
        consumes = { "application/json;charset=UTF-8" }, 
        method = RequestMethod.POST)
    ResponseEntity<Book> create(@ApiParam(value = "", required=true ) @Valid @RequestBody Book body);


    @ApiOperation(value = "Delete book", nickname = "delete", notes = "Delete book by id", response = Book.class, tags={ "books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted", response = Book.class),
        @ApiResponse(code = 404, message = "Not found", response = Error.class) })
    @RequestMapping(value = "/books/{id}",
        produces = { "application/json;charset=UTF-8" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Book> delete(@ApiParam(value = "", required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Get the list of books", nickname = "getAll", notes = "Get the list of all book present in store", response = Book.class, responseContainer = "List", tags={ "books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns the list of books", response = Book.class, responseContainer = "List") })
    @RequestMapping(value = "/books",
        produces = { "application/json;charset=UTF-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Book>> getAll();


    @ApiOperation(value = "Get book by id", nickname = "getById", notes = "Get book by id", response = Book.class, tags={ "books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Book", response = Book.class),
        @ApiResponse(code = 404, message = "Not found", response = Error.class) })
    @RequestMapping(value = "/books/{id}",
        produces = { "application/json;charset=UTF-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<Book> getById(@ApiParam(value = "", required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Add new book", nickname = "update", notes = "Create new book", response = Book.class, tags={ "books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updates", response = Book.class),
        @ApiResponse(code = 404, message = "Not found", response = Error.class) })
    @RequestMapping(value = "/books/{id}",
        produces = { "application/json;charset=UTF-8" }, 
        consumes = { "application/json;charset=UTF-8" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Book> update(@ApiParam(value = "", required=true) @PathVariable("id") Integer id, @ApiParam(value = "", required=true ) @Valid @RequestBody Book body);

}

